FROM --platform=i386 i386/debian:buster
ARG DEBIAN_FRONTEND=noninteractive 
RUN apt-get clean && apt-get update && apt-get -y upgrade
RUN apt-get -y install apt-utils gcc \
	python3 vim unzip ruby nodejs \
	fakeroot dbus base whiptail hexedit \
	patch wamerican ucf manpages \
	file luajit make lua50 dialog curl \
	less cowsay netcat-openbsd sqlite3 g++ git make cmake ninja-build
RUN useradd -m user && echo "user:password" | chpasswd
RUN git clone https://github.com/carlopi/duckdb --branch main --single-branch
RUN cd duckdb && mkdir -p ./build/release && cd build/release && cmake -DEXTENSION_STATIC_BUILD=TRUE -DCORE_EXTENSIONS="icu;json;parquet;autocomplete;tpch;tpcds;fts;sqlite_scanner" -DBUILD_UNITTEST=FALSE -DFORCE_32_BIT=1 -DENABLE_SANITIZER=FALSE -DENABLE_UBSAN=0 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build . --config Release && cp -r repository /home/user/repository && cmake -DCORE_EXTENSIONS="icu;json;parquet;autocomplete" -DBUILD_UNITTEST=FALSE -DFORCE_32_BIT=1 -DENABLE_SANITIZER=FALSE -DENABLE_UBSAN=0 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build . --config Release && cp duckdb /home/user/duckdb && cd ../../ && make clean && cd .. && rm -rf duckdb
COPY --chown=user:user ./examples /home/user/examples
RUN chmod -R +x  /home/user/duckdb
RUN cp /home/user/duckdb /bin/duckdb
RUN chmod -R +x  /home/user/examples/lua
# We set WORKDIR, as this gets extracted by Webvm to be used as the cwd. This is optional.
WORKDIR /home/user/
# We set env, as this gets extracted by Webvm. This is optional.
ENV HOME="/home/user" TERM="xterm" USER="user" SHELL="/bin/bash" EDITOR="vim" LANG="en_US.UTF-8" LC_ALL="C"
RUN echo 'root:password' | chpasswd
CMD [ "/bin/bash" ]
